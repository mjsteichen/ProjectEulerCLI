import Command from '../base'
import MathUtils from '../utils/math'

type TriangleDivisors = {
  Number: number;
  Divisors: number[];
}

export default class Problem012 extends Command {
  static description = `
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  
  Let us list the factors of the first seven triangle numbers:
  
   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.
  
  What is the value of the first triangle number to have over five hundred divisors?
  `

  static flags = {
    ...Command.flags,
  }

  static args = [{ name: 'minimumNumberOfDivisors' }]

  async run() {
    const { args } = this.parse(Problem012)
    const minimumNumberOfDivisors = Number(args.minimumNumberOfDivisors)
    const triangleNumbers: TriangleDivisors[] = []
    let isTotalDivisorsAtOrBelowLimit = true
    let number = 0
    let incrementer = 1
    while (isTotalDivisorsAtOrBelowLimit) {
      triangleNumbers.push({ Number: number, Divisors: MathUtils.findDivisors(number) })
      isTotalDivisorsAtOrBelowLimit = triangleNumbers[triangleNumbers.length - 1].Divisors.length <= minimumNumberOfDivisors
      number += incrementer
      incrementer += 1
    }
    const triangleNumber = triangleNumbers[triangleNumbers.length - 1]
    this.log(`The value of the first triangle number to have over ${minimumNumberOfDivisors} divisors is: ${triangleNumber.Number}`)
  }
}
