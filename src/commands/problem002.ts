import {Command} from '@oclif/command'

export default class Problem002 extends Command {
  static description = `
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.
  `

  static args = [{name: 'fibonacciUpperLimit'}]

  async run() {
    const {args} = this.parse(Problem002)
    const fibonacciUpperLimit = Number(args.fibonacciUpperLimit)
    const fibonacci = this.fibCreator([1, 2], fibonacciUpperLimit)
    const sum = fibonacci.filter(x => x % 2 === 0).reduce((accumulated, next) => accumulated + next)
    this.log(`Considering the fibonacci sequence that doesn't go beyond ${fibonacciUpperLimit} the sum of the even terms in the sequence is ${sum}`)
  }

  fibCreator(fibSequence: number[], biggestNumberAllowed: number): number[] {
    const lastNumber = fibSequence[fibSequence.length - 1]
    if (lastNumber >= biggestNumberAllowed) {
      return fibSequence.slice(0, fibSequence.length - 1)
    }
    const nextValue = fibSequence[fibSequence.length - 2] + lastNumber
    fibSequence.push(nextValue)
    return this.fibCreator(fibSequence, biggestNumberAllowed)
  }
}
